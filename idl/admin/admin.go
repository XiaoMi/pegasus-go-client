// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package admin

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"reflect"

	"github.com/XiaoMi/pegasus-go-client/idl/base"
	"github.com/pegasus-kv/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__

type AppStatus int64

const (
	AppStatus_AS_INVALID       AppStatus = 0
	AppStatus_AS_AVAILABLE     AppStatus = 1
	AppStatus_AS_CREATING      AppStatus = 2
	AppStatus_AS_CREATE_FAILED AppStatus = 3
	AppStatus_AS_DROPPING      AppStatus = 4
	AppStatus_AS_DROP_FAILED   AppStatus = 5
	AppStatus_AS_DROPPED       AppStatus = 6
	AppStatus_AS_RECALLING     AppStatus = 7
)

func (p AppStatus) String() string {
	switch p {
	case AppStatus_AS_INVALID:
		return "AS_INVALID"
	case AppStatus_AS_AVAILABLE:
		return "AS_AVAILABLE"
	case AppStatus_AS_CREATING:
		return "AS_CREATING"
	case AppStatus_AS_CREATE_FAILED:
		return "AS_CREATE_FAILED"
	case AppStatus_AS_DROPPING:
		return "AS_DROPPING"
	case AppStatus_AS_DROP_FAILED:
		return "AS_DROP_FAILED"
	case AppStatus_AS_DROPPED:
		return "AS_DROPPED"
	case AppStatus_AS_RECALLING:
		return "AS_RECALLING"
	}
	return "<UNSET>"
}

func AppStatusFromString(s string) (AppStatus, error) {
	switch s {
	case "AS_INVALID":
		return AppStatus_AS_INVALID, nil
	case "AS_AVAILABLE":
		return AppStatus_AS_AVAILABLE, nil
	case "AS_CREATING":
		return AppStatus_AS_CREATING, nil
	case "AS_CREATE_FAILED":
		return AppStatus_AS_CREATE_FAILED, nil
	case "AS_DROPPING":
		return AppStatus_AS_DROPPING, nil
	case "AS_DROP_FAILED":
		return AppStatus_AS_DROP_FAILED, nil
	case "AS_DROPPED":
		return AppStatus_AS_DROPPED, nil
	case "AS_RECALLING":
		return AppStatus_AS_RECALLING, nil
	}
	return AppStatus(0), fmt.Errorf("not a valid AppStatus string")
}

func AppStatusPtr(v AppStatus) *AppStatus { return &v }

func (p AppStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AppStatus) UnmarshalText(text []byte) error {
	q, err := AppStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AppStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AppStatus(v)
	return nil
}

func (p *AppStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AppEnvOperation int64

const (
	AppEnvOperation_APP_ENV_OP_INVALID AppEnvOperation = 0
	AppEnvOperation_APP_ENV_OP_SET     AppEnvOperation = 1
	AppEnvOperation_APP_ENV_OP_DEL     AppEnvOperation = 2
	AppEnvOperation_APP_ENV_OP_CLEAR   AppEnvOperation = 3
)

func (p AppEnvOperation) String() string {
	switch p {
	case AppEnvOperation_APP_ENV_OP_INVALID:
		return "APP_ENV_OP_INVALID"
	case AppEnvOperation_APP_ENV_OP_SET:
		return "APP_ENV_OP_SET"
	case AppEnvOperation_APP_ENV_OP_DEL:
		return "APP_ENV_OP_DEL"
	case AppEnvOperation_APP_ENV_OP_CLEAR:
		return "APP_ENV_OP_CLEAR"
	}
	return "<UNSET>"
}

func AppEnvOperationFromString(s string) (AppEnvOperation, error) {
	switch s {
	case "APP_ENV_OP_INVALID":
		return AppEnvOperation_APP_ENV_OP_INVALID, nil
	case "APP_ENV_OP_SET":
		return AppEnvOperation_APP_ENV_OP_SET, nil
	case "APP_ENV_OP_DEL":
		return AppEnvOperation_APP_ENV_OP_DEL, nil
	case "APP_ENV_OP_CLEAR":
		return AppEnvOperation_APP_ENV_OP_CLEAR, nil
	}
	return AppEnvOperation(0), fmt.Errorf("not a valid AppEnvOperation string")
}

func AppEnvOperationPtr(v AppEnvOperation) *AppEnvOperation { return &v }

func (p AppEnvOperation) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AppEnvOperation) UnmarshalText(text []byte) error {
	q, err := AppEnvOperationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AppEnvOperation) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AppEnvOperation(v)
	return nil
}

func (p *AppEnvOperation) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type NodeStatus int64

const (
	NodeStatus_NS_INVALID NodeStatus = 0
	NodeStatus_NS_ALIVE   NodeStatus = 1
	NodeStatus_NS_UNALIVE NodeStatus = 2
)

func (p NodeStatus) String() string {
	switch p {
	case NodeStatus_NS_INVALID:
		return "NS_INVALID"
	case NodeStatus_NS_ALIVE:
		return "NS_ALIVE"
	case NodeStatus_NS_UNALIVE:
		return "NS_UNALIVE"
	}
	return "<UNSET>"
}

func NodeStatusFromString(s string) (NodeStatus, error) {
	switch s {
	case "NS_INVALID":
		return NodeStatus_NS_INVALID, nil
	case "NS_ALIVE":
		return NodeStatus_NS_ALIVE, nil
	case "NS_UNALIVE":
		return NodeStatus_NS_UNALIVE, nil
	}
	return NodeStatus(0), fmt.Errorf("not a valid NodeStatus string")
}

func NodeStatusPtr(v NodeStatus) *NodeStatus { return &v }

func (p NodeStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NodeStatus) UnmarshalText(text []byte) error {
	q, err := NodeStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *NodeStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = NodeStatus(v)
	return nil
}

func (p *NodeStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MetaFunctionLevel int64

const (
	MetaFunctionLevel_fl_stopped MetaFunctionLevel = 100
	MetaFunctionLevel_fl_blind   MetaFunctionLevel = 200
	MetaFunctionLevel_fl_freezed MetaFunctionLevel = 300
	MetaFunctionLevel_fl_steady  MetaFunctionLevel = 400
	MetaFunctionLevel_fl_lively  MetaFunctionLevel = 500
	MetaFunctionLevel_fl_invalid MetaFunctionLevel = 10000
)

func (p MetaFunctionLevel) String() string {
	switch p {
	case MetaFunctionLevel_fl_stopped:
		return "fl_stopped"
	case MetaFunctionLevel_fl_blind:
		return "fl_blind"
	case MetaFunctionLevel_fl_freezed:
		return "fl_freezed"
	case MetaFunctionLevel_fl_steady:
		return "fl_steady"
	case MetaFunctionLevel_fl_lively:
		return "fl_lively"
	case MetaFunctionLevel_fl_invalid:
		return "fl_invalid"
	}
	return "<UNSET>"
}

func MetaFunctionLevelFromString(s string) (MetaFunctionLevel, error) {
	switch s {
	case "fl_stopped":
		return MetaFunctionLevel_fl_stopped, nil
	case "fl_blind":
		return MetaFunctionLevel_fl_blind, nil
	case "fl_freezed":
		return MetaFunctionLevel_fl_freezed, nil
	case "fl_steady":
		return MetaFunctionLevel_fl_steady, nil
	case "fl_lively":
		return MetaFunctionLevel_fl_lively, nil
	case "fl_invalid":
		return MetaFunctionLevel_fl_invalid, nil
	}
	return MetaFunctionLevel(0), fmt.Errorf("not a valid MetaFunctionLevel string")
}

func MetaFunctionLevelPtr(v MetaFunctionLevel) *MetaFunctionLevel { return &v }

func (p MetaFunctionLevel) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MetaFunctionLevel) UnmarshalText(text []byte) error {
	q, err := MetaFunctionLevelFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *MetaFunctionLevel) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MetaFunctionLevel(v)
	return nil
}

func (p *MetaFunctionLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DuplicationStatus int64

const (
	DuplicationStatus_DS_INIT    DuplicationStatus = 0
	DuplicationStatus_DS_START   DuplicationStatus = 1
	DuplicationStatus_DS_PAUSE   DuplicationStatus = 2
	DuplicationStatus_DS_REMOVED DuplicationStatus = 3
)

func (p DuplicationStatus) String() string {
	switch p {
	case DuplicationStatus_DS_INIT:
		return "DS_INIT"
	case DuplicationStatus_DS_START:
		return "DS_START"
	case DuplicationStatus_DS_PAUSE:
		return "DS_PAUSE"
	case DuplicationStatus_DS_REMOVED:
		return "DS_REMOVED"
	}
	return "<UNSET>"
}

func DuplicationStatusFromString(s string) (DuplicationStatus, error) {
	switch s {
	case "DS_INIT":
		return DuplicationStatus_DS_INIT, nil
	case "DS_START":
		return DuplicationStatus_DS_START, nil
	case "DS_PAUSE":
		return DuplicationStatus_DS_PAUSE, nil
	case "DS_REMOVED":
		return DuplicationStatus_DS_REMOVED, nil
	}
	return DuplicationStatus(0), fmt.Errorf("not a valid DuplicationStatus string")
}

func DuplicationStatusPtr(v DuplicationStatus) *DuplicationStatus { return &v }

func (p DuplicationStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DuplicationStatus) UnmarshalText(text []byte) error {
	q, err := DuplicationStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DuplicationStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DuplicationStatus(v)
	return nil
}

func (p *DuplicationStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DuplicationFailMode int64

const (
	DuplicationFailMode_FAIL_SLOW DuplicationFailMode = 0
	DuplicationFailMode_FAIL_SKIP DuplicationFailMode = 1
	DuplicationFailMode_FAIL_FAST DuplicationFailMode = 2
)

func (p DuplicationFailMode) String() string {
	switch p {
	case DuplicationFailMode_FAIL_SLOW:
		return "FAIL_SLOW"
	case DuplicationFailMode_FAIL_SKIP:
		return "FAIL_SKIP"
	case DuplicationFailMode_FAIL_FAST:
		return "FAIL_FAST"
	}
	return "<UNSET>"
}

func DuplicationFailModeFromString(s string) (DuplicationFailMode, error) {
	switch s {
	case "FAIL_SLOW":
		return DuplicationFailMode_FAIL_SLOW, nil
	case "FAIL_SKIP":
		return DuplicationFailMode_FAIL_SKIP, nil
	case "FAIL_FAST":
		return DuplicationFailMode_FAIL_FAST, nil
	}
	return DuplicationFailMode(0), fmt.Errorf("not a valid DuplicationFailMode string")
}

func DuplicationFailModePtr(v DuplicationFailMode) *DuplicationFailMode { return &v }

func (p DuplicationFailMode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DuplicationFailMode) UnmarshalText(text []byte) error {
	q, err := DuplicationFailModeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DuplicationFailMode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DuplicationFailMode(v)
	return nil
}

func (p *DuplicationFailMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ConfigType int64

const (
	ConfigType_CT_INVALID                     ConfigType = 0
	ConfigType_CT_ASSIGN_PRIMARY              ConfigType = 1
	ConfigType_CT_UPGRADE_TO_PRIMARY          ConfigType = 2
	ConfigType_CT_ADD_SECONDARY               ConfigType = 3
	ConfigType_CT_UPGRADE_TO_SECONDARY        ConfigType = 4
	ConfigType_CT_DOWNGRADE_TO_SECONDARY      ConfigType = 5
	ConfigType_CT_DOWNGRADE_TO_INACTIVE       ConfigType = 6
	ConfigType_CT_REMOVE                      ConfigType = 7
	ConfigType_CT_ADD_SECONDARY_FOR_LB        ConfigType = 8
	ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT ConfigType = 9
	ConfigType_CT_DROP_PARTITION              ConfigType = 10
	ConfigType_CT_REGISTER_CHILD              ConfigType = 11
)

func (p ConfigType) String() string {
	switch p {
	case ConfigType_CT_INVALID:
		return "CT_INVALID"
	case ConfigType_CT_ASSIGN_PRIMARY:
		return "CT_ASSIGN_PRIMARY"
	case ConfigType_CT_UPGRADE_TO_PRIMARY:
		return "CT_UPGRADE_TO_PRIMARY"
	case ConfigType_CT_ADD_SECONDARY:
		return "CT_ADD_SECONDARY"
	case ConfigType_CT_UPGRADE_TO_SECONDARY:
		return "CT_UPGRADE_TO_SECONDARY"
	case ConfigType_CT_DOWNGRADE_TO_SECONDARY:
		return "CT_DOWNGRADE_TO_SECONDARY"
	case ConfigType_CT_DOWNGRADE_TO_INACTIVE:
		return "CT_DOWNGRADE_TO_INACTIVE"
	case ConfigType_CT_REMOVE:
		return "CT_REMOVE"
	case ConfigType_CT_ADD_SECONDARY_FOR_LB:
		return "CT_ADD_SECONDARY_FOR_LB"
	case ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT:
		return "CT_PRIMARY_FORCE_UPDATE_BALLOT"
	case ConfigType_CT_DROP_PARTITION:
		return "CT_DROP_PARTITION"
	case ConfigType_CT_REGISTER_CHILD:
		return "CT_REGISTER_CHILD"
	}
	return "<UNSET>"
}

func ConfigTypeFromString(s string) (ConfigType, error) {
	switch s {
	case "CT_INVALID":
		return ConfigType_CT_INVALID, nil
	case "CT_ASSIGN_PRIMARY":
		return ConfigType_CT_ASSIGN_PRIMARY, nil
	case "CT_UPGRADE_TO_PRIMARY":
		return ConfigType_CT_UPGRADE_TO_PRIMARY, nil
	case "CT_ADD_SECONDARY":
		return ConfigType_CT_ADD_SECONDARY, nil
	case "CT_UPGRADE_TO_SECONDARY":
		return ConfigType_CT_UPGRADE_TO_SECONDARY, nil
	case "CT_DOWNGRADE_TO_SECONDARY":
		return ConfigType_CT_DOWNGRADE_TO_SECONDARY, nil
	case "CT_DOWNGRADE_TO_INACTIVE":
		return ConfigType_CT_DOWNGRADE_TO_INACTIVE, nil
	case "CT_REMOVE":
		return ConfigType_CT_REMOVE, nil
	case "CT_ADD_SECONDARY_FOR_LB":
		return ConfigType_CT_ADD_SECONDARY_FOR_LB, nil
	case "CT_PRIMARY_FORCE_UPDATE_BALLOT":
		return ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT, nil
	case "CT_DROP_PARTITION":
		return ConfigType_CT_DROP_PARTITION, nil
	case "CT_REGISTER_CHILD":
		return ConfigType_CT_REGISTER_CHILD, nil
	}
	return ConfigType(0), fmt.Errorf("not a valid ConfigType string")
}

func ConfigTypePtr(v ConfigType) *ConfigType { return &v }

func (p ConfigType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ConfigType) UnmarshalText(text []byte) error {
	q, err := ConfigTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ConfigType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ConfigType(v)
	return nil
}

func (p *ConfigType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BalancerRequestType int64

const (
	BalancerRequestType_move_primary   BalancerRequestType = 0
	BalancerRequestType_copy_primary   BalancerRequestType = 1
	BalancerRequestType_copy_secondary BalancerRequestType = 2
)

func (p BalancerRequestType) String() string {
	switch p {
	case BalancerRequestType_move_primary:
		return "move_primary"
	case BalancerRequestType_copy_primary:
		return "copy_primary"
	case BalancerRequestType_copy_secondary:
		return "copy_secondary"
	}
	return "<UNSET>"
}

func BalancerRequestTypeFromString(s string) (BalancerRequestType, error) {
	switch s {
	case "move_primary":
		return BalancerRequestType_move_primary, nil
	case "copy_primary":
		return BalancerRequestType_copy_primary, nil
	case "copy_secondary":
		return BalancerRequestType_copy_secondary, nil
	}
	return BalancerRequestType(0), fmt.Errorf("not a valid BalancerRequestType string")
}

func BalancerRequestTypePtr(v BalancerRequestType) *BalancerRequestType { return &v }

func (p BalancerRequestType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *BalancerRequestType) UnmarshalText(text []byte) error {
	q, err := BalancerRequestTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *BalancerRequestType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = BalancerRequestType(v)
	return nil
}

func (p *BalancerRequestType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - PartitionCount
//  - ReplicaCount
//  - SuccessIfExist
//  - AppType
//  - IsStateful
//  - Envs
type CreateAppOptions struct {
	PartitionCount int32             `thrift:"partition_count,1" db:"partition_count" json:"partition_count"`
	ReplicaCount   int32             `thrift:"replica_count,2" db:"replica_count" json:"replica_count"`
	SuccessIfExist bool              `thrift:"success_if_exist,3" db:"success_if_exist" json:"success_if_exist"`
	AppType        string            `thrift:"app_type,4" db:"app_type" json:"app_type"`
	IsStateful     bool              `thrift:"is_stateful,5" db:"is_stateful" json:"is_stateful"`
	Envs           map[string]string `thrift:"envs,6" db:"envs" json:"envs"`
}

func NewCreateAppOptions() *CreateAppOptions {
	return &CreateAppOptions{}
}

func (p *CreateAppOptions) GetPartitionCount() int32 {
	return p.PartitionCount
}

func (p *CreateAppOptions) GetReplicaCount() int32 {
	return p.ReplicaCount
}

func (p *CreateAppOptions) GetSuccessIfExist() bool {
	return p.SuccessIfExist
}

func (p *CreateAppOptions) GetAppType() string {
	return p.AppType
}

func (p *CreateAppOptions) GetIsStateful() bool {
	return p.IsStateful
}

func (p *CreateAppOptions) GetEnvs() map[string]string {
	return p.Envs
}
func (p *CreateAppOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateAppOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PartitionCount = v
	}
	return nil
}

func (p *CreateAppOptions) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReplicaCount = v
	}
	return nil
}

func (p *CreateAppOptions) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SuccessIfExist = v
	}
	return nil
}

func (p *CreateAppOptions) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppType = v
	}
	return nil
}

func (p *CreateAppOptions) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsStateful = v
	}
	return nil
}

func (p *CreateAppOptions) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Envs = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Envs[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CreateAppOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_app_options"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateAppOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_count", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partition_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_count (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partition_count: ", p), err)
	}
	return err
}

func (p *CreateAppOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("replica_count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replica_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ReplicaCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.replica_count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replica_count: ", p), err)
	}
	return err
}

func (p *CreateAppOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success_if_exist", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:success_if_exist: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SuccessIfExist)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success_if_exist (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:success_if_exist: ", p), err)
	}
	return err
}

func (p *CreateAppOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_type", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_type: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_type: ", p), err)
	}
	return err
}

func (p *CreateAppOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_stateful", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_stateful: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsStateful)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_stateful (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_stateful: ", p), err)
	}
	return err
}

func (p *CreateAppOptions) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("envs", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:envs: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Envs)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Envs {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:envs: ", p), err)
	}
	return err
}

func (p *CreateAppOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAppOptions(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Options
type CreateAppRequest struct {
	AppName string            `thrift:"app_name,1" db:"app_name" json:"app_name"`
	Options *CreateAppOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewCreateAppRequest() *CreateAppRequest {
	return &CreateAppRequest{}
}

func (p *CreateAppRequest) GetAppName() string {
	return p.AppName
}

var CreateAppRequest_Options_DEFAULT *CreateAppOptions

func (p *CreateAppRequest) GetOptions() *CreateAppOptions {
	if !p.IsSetOptions() {
		return CreateAppRequest_Options_DEFAULT
	}
	return p.Options
}
func (p *CreateAppRequest) IsSetOptions() bool {
	return p.Options != nil
}

func (p *CreateAppRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateAppRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *CreateAppRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Options = &CreateAppOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *CreateAppRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_app_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateAppRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err)
	}
	return err
}

func (p *CreateAppRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *CreateAppRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAppRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Appid
type CreateAppResponse struct {
	Err   *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Appid int32           `thrift:"appid,2" db:"appid" json:"appid"`
}

func NewCreateAppResponse() *CreateAppResponse {
	return &CreateAppResponse{}
}

var CreateAppResponse_Err_DEFAULT *base.ErrorCode

func (p *CreateAppResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return CreateAppResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *CreateAppResponse) GetAppid() int32 {
	return p.Appid
}
func (p *CreateAppResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *CreateAppResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateAppResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CreateAppResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *CreateAppResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_app_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateAppResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *CreateAppResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Appid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err)
	}
	return err
}

func (p *CreateAppResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAppResponse(%+v)", *p)
}

// Attributes:
//  - SuccessIfNotExist
//  - ReserveSeconds
type DropAppOptions struct {
	SuccessIfNotExist bool   `thrift:"success_if_not_exist,1" db:"success_if_not_exist" json:"success_if_not_exist"`
	ReserveSeconds    *int64 `thrift:"reserve_seconds,2" db:"reserve_seconds" json:"reserve_seconds,omitempty"`
}

func NewDropAppOptions() *DropAppOptions {
	return &DropAppOptions{}
}

func (p *DropAppOptions) GetSuccessIfNotExist() bool {
	return p.SuccessIfNotExist
}

var DropAppOptions_ReserveSeconds_DEFAULT int64

func (p *DropAppOptions) GetReserveSeconds() int64 {
	if !p.IsSetReserveSeconds() {
		return DropAppOptions_ReserveSeconds_DEFAULT
	}
	return *p.ReserveSeconds
}
func (p *DropAppOptions) IsSetReserveSeconds() bool {
	return p.ReserveSeconds != nil
}

func (p *DropAppOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DropAppOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SuccessIfNotExist = v
	}
	return nil
}

func (p *DropAppOptions) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReserveSeconds = &v
	}
	return nil
}

func (p *DropAppOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_app_options"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DropAppOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success_if_not_exist", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success_if_not_exist: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SuccessIfNotExist)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success_if_not_exist (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success_if_not_exist: ", p), err)
	}
	return err
}

func (p *DropAppOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReserveSeconds() {
		if err := oprot.WriteFieldBegin("reserve_seconds", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reserve_seconds: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReserveSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reserve_seconds (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reserve_seconds: ", p), err)
		}
	}
	return err
}

func (p *DropAppOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropAppOptions(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Options
type DropAppRequest struct {
	AppName string          `thrift:"app_name,1" db:"app_name" json:"app_name"`
	Options *DropAppOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewDropAppRequest() *DropAppRequest {
	return &DropAppRequest{}
}

func (p *DropAppRequest) GetAppName() string {
	return p.AppName
}

var DropAppRequest_Options_DEFAULT *DropAppOptions

func (p *DropAppRequest) GetOptions() *DropAppOptions {
	if !p.IsSetOptions() {
		return DropAppRequest_Options_DEFAULT
	}
	return p.Options
}
func (p *DropAppRequest) IsSetOptions() bool {
	return p.Options != nil
}

func (p *DropAppRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DropAppRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *DropAppRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Options = &DropAppOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *DropAppRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_app_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DropAppRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err)
	}
	return err
}

func (p *DropAppRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *DropAppRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropAppRequest(%+v)", *p)
}

// Attributes:
//  - Err
type DropAppResponse struct {
	Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewDropAppResponse() *DropAppResponse {
	return &DropAppResponse{}
}

var DropAppResponse_Err_DEFAULT *base.ErrorCode

func (p *DropAppResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return DropAppResponse_Err_DEFAULT
	}
	return p.Err
}
func (p *DropAppResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *DropAppResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DropAppResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *DropAppResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_app_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DropAppResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *DropAppResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropAppResponse(%+v)", *p)
}

// Attributes:
//  - AppID
//  - NewAppName_
type RecallAppRequest struct {
	AppID       int32  `thrift:"app_id,1" db:"app_id" json:"app_id"`
	NewAppName_ string `thrift:"new_app_name,2" db:"new_app_name" json:"new_app_name"`
}

func NewRecallAppRequest() *RecallAppRequest {
	return &RecallAppRequest{}
}

func (p *RecallAppRequest) GetAppID() int32 {
	return p.AppID
}

func (p *RecallAppRequest) GetNewAppName_() string {
	return p.NewAppName_
}
func (p *RecallAppRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecallAppRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *RecallAppRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NewAppName_ = v
	}
	return nil
}

func (p *RecallAppRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("recall_app_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecallAppRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err)
	}
	return err
}

func (p *RecallAppRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_app_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewAppName_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_app_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_app_name: ", p), err)
	}
	return err
}

func (p *RecallAppRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecallAppRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Info
type RecallAppResponse struct {
	Err  *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Info *AppInfo        `thrift:"info,2" db:"info" json:"info"`
}

func NewRecallAppResponse() *RecallAppResponse {
	return &RecallAppResponse{}
}

var RecallAppResponse_Err_DEFAULT *base.ErrorCode

func (p *RecallAppResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return RecallAppResponse_Err_DEFAULT
	}
	return p.Err
}

var RecallAppResponse_Info_DEFAULT *AppInfo

func (p *RecallAppResponse) GetInfo() *AppInfo {
	if !p.IsSetInfo() {
		return RecallAppResponse_Info_DEFAULT
	}
	return p.Info
}
func (p *RecallAppResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *RecallAppResponse) IsSetInfo() bool {
	return p.Info != nil
}

func (p *RecallAppResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecallAppResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *RecallAppResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Info = &AppInfo{
		Status: 0,

		InitPartitionCount: -1,
	}
	if err := p.Info.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
	}
	return nil
}

func (p *RecallAppResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("recall_app_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecallAppResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *RecallAppResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := p.Info.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *RecallAppResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecallAppResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - AppType
//  - AppName
//  - AppID
//  - PartitionCount
//  - Envs
//  - IsStateful
//  - MaxReplicaCount
//  - ExpireSecond
//  - CreateSecond
//  - DropSecond
//  - Duplicating
//  - InitPartitionCount
//  - IsBulkLoading
type AppInfo struct {
	Status             AppStatus         `thrift:"status,1" db:"status" json:"status"`
	AppType            string            `thrift:"app_type,2" db:"app_type" json:"app_type"`
	AppName            string            `thrift:"app_name,3" db:"app_name" json:"app_name"`
	AppID              int32             `thrift:"app_id,4" db:"app_id" json:"app_id"`
	PartitionCount     int32             `thrift:"partition_count,5" db:"partition_count" json:"partition_count"`
	Envs               map[string]string `thrift:"envs,6" db:"envs" json:"envs"`
	IsStateful         bool              `thrift:"is_stateful,7" db:"is_stateful" json:"is_stateful"`
	MaxReplicaCount    int32             `thrift:"max_replica_count,8" db:"max_replica_count" json:"max_replica_count"`
	ExpireSecond       int64             `thrift:"expire_second,9" db:"expire_second" json:"expire_second"`
	CreateSecond       int64             `thrift:"create_second,10" db:"create_second" json:"create_second"`
	DropSecond         int64             `thrift:"drop_second,11" db:"drop_second" json:"drop_second"`
	Duplicating        *bool             `thrift:"duplicating,12" db:"duplicating" json:"duplicating,omitempty"`
	InitPartitionCount int32             `thrift:"init_partition_count,13" db:"init_partition_count" json:"init_partition_count"`
	IsBulkLoading      bool              `thrift:"is_bulk_loading,14" db:"is_bulk_loading" json:"is_bulk_loading"`
}

func NewAppInfo() *AppInfo {
	return &AppInfo{
		Status: 0,

		InitPartitionCount: -1,
	}
}

func (p *AppInfo) GetStatus() AppStatus {
	return p.Status
}

func (p *AppInfo) GetAppType() string {
	return p.AppType
}

func (p *AppInfo) GetAppName() string {
	return p.AppName
}

func (p *AppInfo) GetAppID() int32 {
	return p.AppID
}

func (p *AppInfo) GetPartitionCount() int32 {
	return p.PartitionCount
}

func (p *AppInfo) GetEnvs() map[string]string {
	return p.Envs
}

func (p *AppInfo) GetIsStateful() bool {
	return p.IsStateful
}

func (p *AppInfo) GetMaxReplicaCount() int32 {
	return p.MaxReplicaCount
}

func (p *AppInfo) GetExpireSecond() int64 {
	return p.ExpireSecond
}

func (p *AppInfo) GetCreateSecond() int64 {
	return p.CreateSecond
}

func (p *AppInfo) GetDropSecond() int64 {
	return p.DropSecond
}

var AppInfo_Duplicating_DEFAULT bool

func (p *AppInfo) GetDuplicating() bool {
	if !p.IsSetDuplicating() {
		return AppInfo_Duplicating_DEFAULT
	}
	return *p.Duplicating
}

func (p *AppInfo) GetInitPartitionCount() int32 {
	return p.InitPartitionCount
}

var AppInfo_IsBulkLoading_DEFAULT bool = false

func (p *AppInfo) GetIsBulkLoading() bool {
	return p.IsBulkLoading
}
func (p *AppInfo) IsSetDuplicating() bool {
	return p.Duplicating != nil
}

func (p *AppInfo) IsSetIsBulkLoading() bool {
	return p.IsBulkLoading != AppInfo_IsBulkLoading_DEFAULT
}

func (p *AppInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AppInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AppStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *AppInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppType = v
	}
	return nil
}

func (p *AppInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *AppInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *AppInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PartitionCount = v
	}
	return nil
}

func (p *AppInfo) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Envs = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.Envs[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AppInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsStateful = v
	}
	return nil
}

func (p *AppInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MaxReplicaCount = v
	}
	return nil
}

func (p *AppInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ExpireSecond = v
	}
	return nil
}

func (p *AppInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CreateSecond = v
	}
	return nil
}

func (p *AppInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.DropSecond = v
	}
	return nil
}

func (p *AppInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Duplicating = &v
	}
	return nil
}

func (p *AppInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.InitPartitionCount = v
	}
	return nil
}

func (p *AppInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.IsBulkLoading = v
	}
	return nil
}

func (p *AppInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("app_info"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AppInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_type", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:app_type: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:app_type: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_name: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_id: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_count", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partition_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_count (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partition_count: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("envs", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:envs: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Envs)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Envs {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:envs: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_stateful", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_stateful: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsStateful)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_stateful (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_stateful: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_replica_count", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:max_replica_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxReplicaCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_replica_count (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:max_replica_count: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expire_second", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:expire_second: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ExpireSecond)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expire_second (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:expire_second: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_second", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:create_second: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateSecond)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_second (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:create_second: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("drop_second", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:drop_second: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DropSecond)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.drop_second (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:drop_second: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuplicating() {
		if err := oprot.WriteFieldBegin("duplicating", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:duplicating: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Duplicating)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duplicating (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:duplicating: ", p), err)
		}
	}
	return err
}

func (p *AppInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("init_partition_count", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:init_partition_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.InitPartitionCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.init_partition_count (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:init_partition_count: ", p), err)
	}
	return err
}

func (p *AppInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBulkLoading() {
		if err := oprot.WriteFieldBegin("is_bulk_loading", thrift.BOOL, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:is_bulk_loading: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.IsBulkLoading)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.is_bulk_loading (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:is_bulk_loading: ", p), err)
		}
	}
	return err
}

func (p *AppInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppInfo(%+v)", *p)
}

// Attributes:
//  - Status
type ListAppsRequest struct {
	Status AppStatus `thrift:"status,1" db:"status" json:"status"`
}

func NewListAppsRequest() *ListAppsRequest {
	return &ListAppsRequest{
		Status: 0,
	}
}

func (p *ListAppsRequest) GetStatus() AppStatus {
	return p.Status
}
func (p *ListAppsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListAppsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AppStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *ListAppsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_apps_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListAppsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ListAppsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAppsRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Infos
type ListAppsResponse struct {
	Err   *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Infos []*AppInfo      `thrift:"infos,2" db:"infos" json:"infos"`
}

func NewListAppsResponse() *ListAppsResponse {
	return &ListAppsResponse{}
}

var ListAppsResponse_Err_DEFAULT *base.ErrorCode

func (p *ListAppsResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return ListAppsResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *ListAppsResponse) GetInfos() []*AppInfo {
	return p.Infos
}
func (p *ListAppsResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *ListAppsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListAppsResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *ListAppsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AppInfo, 0, size)
	p.Infos = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &AppInfo{
			Status: 0,

			InitPartitionCount: -1,
		}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Infos = append(p.Infos, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListAppsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_apps_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListAppsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *ListAppsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("infos", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:infos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Infos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Infos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:infos: ", p), err)
	}
	return err
}

func (p *ListAppsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAppsResponse(%+v)", *p)
}

// Attributes:
//  - MetaServer
type QueryAppInfoRequest struct {
	MetaServer *base.RPCAddress `thrift:"meta_server,1" db:"meta_server" json:"meta_server"`
}

func NewQueryAppInfoRequest() *QueryAppInfoRequest {
	return &QueryAppInfoRequest{}
}

var QueryAppInfoRequest_MetaServer_DEFAULT *base.RPCAddress

func (p *QueryAppInfoRequest) GetMetaServer() *base.RPCAddress {
	if !p.IsSetMetaServer() {
		return QueryAppInfoRequest_MetaServer_DEFAULT
	}
	return p.MetaServer
}
func (p *QueryAppInfoRequest) IsSetMetaServer() bool {
	return p.MetaServer != nil
}

func (p *QueryAppInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryAppInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	p.MetaServer = &base.RPCAddress{}
	if err := p.MetaServer.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetaServer), err)
	}
	return nil
}

func (p *QueryAppInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_app_info_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryAppInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("meta_server", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:meta_server: ", p), err)
	}
	if err := p.MetaServer.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetaServer), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:meta_server: ", p), err)
	}
	return err
}

func (p *QueryAppInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAppInfoRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Apps
type QueryAppInfoResponse struct {
	Err  *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Apps []*AppInfo      `thrift:"apps,2" db:"apps" json:"apps"`
}

func NewQueryAppInfoResponse() *QueryAppInfoResponse {
	return &QueryAppInfoResponse{}
}

var QueryAppInfoResponse_Err_DEFAULT *base.ErrorCode

func (p *QueryAppInfoResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return QueryAppInfoResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *QueryAppInfoResponse) GetApps() []*AppInfo {
	return p.Apps
}
func (p *QueryAppInfoResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *QueryAppInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryAppInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *QueryAppInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AppInfo, 0, size)
	p.Apps = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &AppInfo{
			Status: 0,

			InitPartitionCount: -1,
		}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Apps = append(p.Apps, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryAppInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_app_info_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryAppInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *QueryAppInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apps", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:apps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Apps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Apps {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:apps: ", p), err)
	}
	return err
}

func (p *QueryAppInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAppInfoResponse(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Op
//  - Keys
//  - Values
//  - ClearPrefix
type UpdateAppEnvRequest struct {
	AppName     string          `thrift:"app_name,1" db:"app_name" json:"app_name"`
	Op          AppEnvOperation `thrift:"op,2" db:"op" json:"op"`
	Keys        []string        `thrift:"keys,3" db:"keys" json:"keys,omitempty"`
	Values      []string        `thrift:"values,4" db:"values" json:"values,omitempty"`
	ClearPrefix *string         `thrift:"clear_prefix,5" db:"clear_prefix" json:"clear_prefix,omitempty"`
}

func NewUpdateAppEnvRequest() *UpdateAppEnvRequest {
	return &UpdateAppEnvRequest{
		Op: 0,
	}
}

func (p *UpdateAppEnvRequest) GetAppName() string {
	return p.AppName
}

func (p *UpdateAppEnvRequest) GetOp() AppEnvOperation {
	return p.Op
}

var UpdateAppEnvRequest_Keys_DEFAULT []string

func (p *UpdateAppEnvRequest) GetKeys() []string {
	return p.Keys
}

var UpdateAppEnvRequest_Values_DEFAULT []string

func (p *UpdateAppEnvRequest) GetValues() []string {
	return p.Values
}

var UpdateAppEnvRequest_ClearPrefix_DEFAULT string

func (p *UpdateAppEnvRequest) GetClearPrefix() string {
	if !p.IsSetClearPrefix() {
		return UpdateAppEnvRequest_ClearPrefix_DEFAULT
	}
	return *p.ClearPrefix
}
func (p *UpdateAppEnvRequest) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *UpdateAppEnvRequest) IsSetValues() bool {
	return p.Values != nil
}

func (p *UpdateAppEnvRequest) IsSetClearPrefix() bool {
	return p.ClearPrefix != nil
}

func (p *UpdateAppEnvRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateAppEnvRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *UpdateAppEnvRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := AppEnvOperation(v)
		p.Op = temp
	}
	return nil
}

func (p *UpdateAppEnvRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.Keys = append(p.Keys, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateAppEnvRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.Values = append(p.Values, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateAppEnvRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ClearPrefix = &v
	}
	return nil
}

func (p *UpdateAppEnvRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_app_env_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateAppEnvRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err)
	}
	return err
}

func (p *UpdateAppEnvRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("op", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Op)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err)
	}
	return err
}

func (p *UpdateAppEnvRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err := oprot.WriteFieldBegin("keys", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keys: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Keys {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keys: ", p), err)
		}
	}
	return err
}

func (p *UpdateAppEnvRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetValues() {
		if err := oprot.WriteFieldBegin("values", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Values {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err)
		}
	}
	return err
}

func (p *UpdateAppEnvRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetClearPrefix() {
		if err := oprot.WriteFieldBegin("clear_prefix", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clear_prefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ClearPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clear_prefix (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clear_prefix: ", p), err)
		}
	}
	return err
}

func (p *UpdateAppEnvRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAppEnvRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - HintMessage
type UpdateAppEnvResponse struct {
	Err         *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	HintMessage string          `thrift:"hint_message,2" db:"hint_message" json:"hint_message"`
}

func NewUpdateAppEnvResponse() *UpdateAppEnvResponse {
	return &UpdateAppEnvResponse{}
}

var UpdateAppEnvResponse_Err_DEFAULT *base.ErrorCode

func (p *UpdateAppEnvResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return UpdateAppEnvResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *UpdateAppEnvResponse) GetHintMessage() string {
	return p.HintMessage
}
func (p *UpdateAppEnvResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *UpdateAppEnvResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateAppEnvResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *UpdateAppEnvResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HintMessage = v
	}
	return nil
}

func (p *UpdateAppEnvResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_app_env_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateAppEnvResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *UpdateAppEnvResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hint_message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_message: ", p), err)
	}
	if err := oprot.WriteString(string(p.HintMessage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hint_message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_message: ", p), err)
	}
	return err
}

func (p *UpdateAppEnvResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAppEnvResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - Address
type NodeInfo struct {
	Status  NodeStatus       `thrift:"status,1" db:"status" json:"status"`
	Address *base.RPCAddress `thrift:"address,2" db:"address" json:"address"`
}

func NewNodeInfo() *NodeInfo {
	return &NodeInfo{
		Status: 0,
	}
}

func (p *NodeInfo) GetStatus() NodeStatus {
	return p.Status
}

var NodeInfo_Address_DEFAULT *base.RPCAddress

func (p *NodeInfo) GetAddress() *base.RPCAddress {
	if !p.IsSetAddress() {
		return NodeInfo_Address_DEFAULT
	}
	return p.Address
}
func (p *NodeInfo) IsSetAddress() bool {
	return p.Address != nil
}

func (p *NodeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NodeInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NodeStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *NodeInfo) ReadField2(iprot thrift.TProtocol) error {
	p.Address = &base.RPCAddress{}
	if err := p.Address.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
	}
	return nil
}

func (p *NodeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("node_info"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NodeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
	}
	if err := p.Address.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
	}
	return err
}

func (p *NodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeInfo(%+v)", *p)
}

// Attributes:
//  - Status
type ListNodesRequest struct {
	Status NodeStatus `thrift:"status,1" db:"status" json:"status"`
}

func NewListNodesRequest() *ListNodesRequest {
	return &ListNodesRequest{
		Status: 0,
	}
}

func (p *ListNodesRequest) GetStatus() NodeStatus {
	return p.Status
}
func (p *ListNodesRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListNodesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NodeStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *ListNodesRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_nodes_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListNodesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ListNodesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodesRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Infos
type ListNodesResponse struct {
	Err   *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Infos []*NodeInfo     `thrift:"infos,2" db:"infos" json:"infos"`
}

func NewListNodesResponse() *ListNodesResponse {
	return &ListNodesResponse{}
}

var ListNodesResponse_Err_DEFAULT *base.ErrorCode

func (p *ListNodesResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return ListNodesResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *ListNodesResponse) GetInfos() []*NodeInfo {
	return p.Infos
}
func (p *ListNodesResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *ListNodesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListNodesResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *ListNodesResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NodeInfo, 0, size)
	p.Infos = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &NodeInfo{
			Status: 0,
		}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Infos = append(p.Infos, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListNodesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_nodes_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListNodesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *ListNodesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("infos", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:infos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Infos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Infos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:infos: ", p), err)
	}
	return err
}

func (p *ListNodesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodesResponse(%+v)", *p)
}

type ClusterInfoRequest struct {
}

func NewClusterInfoRequest() *ClusterInfoRequest {
	return &ClusterInfoRequest{}
}

func (p *ClusterInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClusterInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cluster_info_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClusterInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterInfoRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Keys
//  - Values
type ClusterInfoResponse struct {
	Err    *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Keys   []string        `thrift:"keys,2" db:"keys" json:"keys"`
	Values []string        `thrift:"values,3" db:"values" json:"values"`
}

func NewClusterInfoResponse() *ClusterInfoResponse {
	return &ClusterInfoResponse{}
}

var ClusterInfoResponse_Err_DEFAULT *base.ErrorCode

func (p *ClusterInfoResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return ClusterInfoResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *ClusterInfoResponse) GetKeys() []string {
	return p.Keys
}

func (p *ClusterInfoResponse) GetValues() []string {
	return p.Values
}
func (p *ClusterInfoResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *ClusterInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClusterInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *ClusterInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Keys = append(p.Keys, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClusterInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.Values = append(p.Values, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClusterInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cluster_info_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClusterInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *ClusterInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err)
	}
	return err
}

func (p *ClusterInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err)
	}
	return err
}

func (p *ClusterInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterInfoResponse(%+v)", *p)
}

// Attributes:
//  - Level
type MetaControlRequest struct {
	Level MetaFunctionLevel `thrift:"level,1" db:"level" json:"level"`
}

func NewMetaControlRequest() *MetaControlRequest {
	return &MetaControlRequest{}
}

func (p *MetaControlRequest) GetLevel() MetaFunctionLevel {
	return p.Level
}
func (p *MetaControlRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetaControlRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := MetaFunctionLevel(v)
		p.Level = temp
	}
	return nil
}

func (p *MetaControlRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("meta_control_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetaControlRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err)
	}
	return err
}

func (p *MetaControlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaControlRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - OldLevel
type MetaControlResponse struct {
	Err      *base.ErrorCode   `thrift:"err,1" db:"err" json:"err"`
	OldLevel MetaFunctionLevel `thrift:"old_level,2" db:"old_level" json:"old_level"`
}

func NewMetaControlResponse() *MetaControlResponse {
	return &MetaControlResponse{}
}

var MetaControlResponse_Err_DEFAULT *base.ErrorCode

func (p *MetaControlResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return MetaControlResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *MetaControlResponse) GetOldLevel() MetaFunctionLevel {
	return p.OldLevel
}
func (p *MetaControlResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *MetaControlResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MetaControlResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *MetaControlResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := MetaFunctionLevel(v)
		p.OldLevel = temp
	}
	return nil
}

func (p *MetaControlResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("meta_control_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetaControlResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *MetaControlResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_level", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old_level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OldLevel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old_level: ", p), err)
	}
	return err
}

func (p *MetaControlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaControlResponse(%+v)", *p)
}

// Attributes:
//  - AppName
//  - RemoteClusterName
//  - Freezed
type DuplicationAddRequest struct {
	AppName           string `thrift:"app_name,1" db:"app_name" json:"app_name"`
	RemoteClusterName string `thrift:"remote_cluster_name,2" db:"remote_cluster_name" json:"remote_cluster_name"`
	Freezed           bool   `thrift:"freezed,3" db:"freezed" json:"freezed"`
}

func NewDuplicationAddRequest() *DuplicationAddRequest {
	return &DuplicationAddRequest{}
}

func (p *DuplicationAddRequest) GetAppName() string {
	return p.AppName
}

func (p *DuplicationAddRequest) GetRemoteClusterName() string {
	return p.RemoteClusterName
}

func (p *DuplicationAddRequest) GetFreezed() bool {
	return p.Freezed
}
func (p *DuplicationAddRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationAddRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *DuplicationAddRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RemoteClusterName = v
	}
	return nil
}

func (p *DuplicationAddRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Freezed = v
	}
	return nil
}

func (p *DuplicationAddRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_add_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationAddRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err)
	}
	return err
}

func (p *DuplicationAddRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remote_cluster_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remote_cluster_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.RemoteClusterName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remote_cluster_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remote_cluster_name: ", p), err)
	}
	return err
}

func (p *DuplicationAddRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freezed", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:freezed: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Freezed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.freezed (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:freezed: ", p), err)
	}
	return err
}

func (p *DuplicationAddRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationAddRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Appid
//  - Dupid
//  - Hint
type DuplicationAddResponse struct {
	Err   *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Appid int32           `thrift:"appid,2" db:"appid" json:"appid"`
	Dupid int32           `thrift:"dupid,3" db:"dupid" json:"dupid"`
	Hint  *string         `thrift:"hint,4" db:"hint" json:"hint,omitempty"`
}

func NewDuplicationAddResponse() *DuplicationAddResponse {
	return &DuplicationAddResponse{}
}

var DuplicationAddResponse_Err_DEFAULT *base.ErrorCode

func (p *DuplicationAddResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return DuplicationAddResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *DuplicationAddResponse) GetAppid() int32 {
	return p.Appid
}

func (p *DuplicationAddResponse) GetDupid() int32 {
	return p.Dupid
}

var DuplicationAddResponse_Hint_DEFAULT string

func (p *DuplicationAddResponse) GetHint() string {
	if !p.IsSetHint() {
		return DuplicationAddResponse_Hint_DEFAULT
	}
	return *p.Hint
}
func (p *DuplicationAddResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *DuplicationAddResponse) IsSetHint() bool {
	return p.Hint != nil
}

func (p *DuplicationAddResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationAddResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *DuplicationAddResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *DuplicationAddResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Dupid = v
	}
	return nil
}

func (p *DuplicationAddResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Hint = &v
	}
	return nil
}

func (p *DuplicationAddResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_add_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationAddResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *DuplicationAddResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Appid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err)
	}
	return err
}

func (p *DuplicationAddResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dupid", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dupid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Dupid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dupid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dupid: ", p), err)
	}
	return err
}

func (p *DuplicationAddResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHint() {
		if err := oprot.WriteFieldBegin("hint", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hint (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hint: ", p), err)
		}
	}
	return err
}

func (p *DuplicationAddResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationAddResponse(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Dupid
//  - Status
//  - FailMode
type DuplicationModifyRequest struct {
	AppName  string               `thrift:"app_name,1" db:"app_name" json:"app_name"`
	Dupid    int32                `thrift:"dupid,2" db:"dupid" json:"dupid"`
	Status   *DuplicationStatus   `thrift:"status,3" db:"status" json:"status,omitempty"`
	FailMode *DuplicationFailMode `thrift:"fail_mode,4" db:"fail_mode" json:"fail_mode,omitempty"`
}

func NewDuplicationModifyRequest() *DuplicationModifyRequest {
	return &DuplicationModifyRequest{}
}

func (p *DuplicationModifyRequest) GetAppName() string {
	return p.AppName
}

func (p *DuplicationModifyRequest) GetDupid() int32 {
	return p.Dupid
}

var DuplicationModifyRequest_Status_DEFAULT DuplicationStatus

func (p *DuplicationModifyRequest) GetStatus() DuplicationStatus {
	if !p.IsSetStatus() {
		return DuplicationModifyRequest_Status_DEFAULT
	}
	return *p.Status
}

var DuplicationModifyRequest_FailMode_DEFAULT DuplicationFailMode

func (p *DuplicationModifyRequest) GetFailMode() DuplicationFailMode {
	if !p.IsSetFailMode() {
		return DuplicationModifyRequest_FailMode_DEFAULT
	}
	return *p.FailMode
}
func (p *DuplicationModifyRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DuplicationModifyRequest) IsSetFailMode() bool {
	return p.FailMode != nil
}

func (p *DuplicationModifyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationModifyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *DuplicationModifyRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Dupid = v
	}
	return nil
}

func (p *DuplicationModifyRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := DuplicationStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *DuplicationModifyRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := DuplicationFailMode(v)
		p.FailMode = &temp
	}
	return nil
}

func (p *DuplicationModifyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_modify_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationModifyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err)
	}
	return err
}

func (p *DuplicationModifyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dupid", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dupid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Dupid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dupid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dupid: ", p), err)
	}
	return err
}

func (p *DuplicationModifyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
		}
	}
	return err
}

func (p *DuplicationModifyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailMode() {
		if err := oprot.WriteFieldBegin("fail_mode", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fail_mode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FailMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fail_mode (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fail_mode: ", p), err)
		}
	}
	return err
}

func (p *DuplicationModifyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationModifyRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Appid
type DuplicationModifyResponse struct {
	Err   *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	Appid int32           `thrift:"appid,2" db:"appid" json:"appid"`
}

func NewDuplicationModifyResponse() *DuplicationModifyResponse {
	return &DuplicationModifyResponse{}
}

var DuplicationModifyResponse_Err_DEFAULT *base.ErrorCode

func (p *DuplicationModifyResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return DuplicationModifyResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *DuplicationModifyResponse) GetAppid() int32 {
	return p.Appid
}
func (p *DuplicationModifyResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *DuplicationModifyResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationModifyResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *DuplicationModifyResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *DuplicationModifyResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_modify_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationModifyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *DuplicationModifyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Appid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err)
	}
	return err
}

func (p *DuplicationModifyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationModifyResponse(%+v)", *p)
}

// Attributes:
//  - Dupid
//  - Status
//  - Remote
//  - CreateTs
//  - Progress
//  - FailMode
type DuplicationEntry struct {
	Dupid    int32             `thrift:"dupid,1" db:"dupid" json:"dupid"`
	Status   DuplicationStatus `thrift:"status,2" db:"status" json:"status"`
	Remote   string            `thrift:"remote,3" db:"remote" json:"remote"`
	CreateTs int64             `thrift:"create_ts,4" db:"create_ts" json:"create_ts"`
	Progress map[int32]int64   `thrift:"progress,5" db:"progress" json:"progress,omitempty"`
	// unused field # 6
	FailMode *DuplicationFailMode `thrift:"fail_mode,7" db:"fail_mode" json:"fail_mode,omitempty"`
}

func NewDuplicationEntry() *DuplicationEntry {
	return &DuplicationEntry{}
}

func (p *DuplicationEntry) GetDupid() int32 {
	return p.Dupid
}

func (p *DuplicationEntry) GetStatus() DuplicationStatus {
	return p.Status
}

func (p *DuplicationEntry) GetRemote() string {
	return p.Remote
}

func (p *DuplicationEntry) GetCreateTs() int64 {
	return p.CreateTs
}

var DuplicationEntry_Progress_DEFAULT map[int32]int64

func (p *DuplicationEntry) GetProgress() map[int32]int64 {
	return p.Progress
}

var DuplicationEntry_FailMode_DEFAULT DuplicationFailMode

func (p *DuplicationEntry) GetFailMode() DuplicationFailMode {
	if !p.IsSetFailMode() {
		return DuplicationEntry_FailMode_DEFAULT
	}
	return *p.FailMode
}
func (p *DuplicationEntry) IsSetProgress() bool {
	return p.Progress != nil
}

func (p *DuplicationEntry) IsSetFailMode() bool {
	return p.FailMode != nil
}

func (p *DuplicationEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dupid = v
	}
	return nil
}

func (p *DuplicationEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DuplicationStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *DuplicationEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Remote = v
	}
	return nil
}

func (p *DuplicationEntry) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreateTs = v
	}
	return nil
}

func (p *DuplicationEntry) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int64, size)
	p.Progress = tMap
	for i := 0; i < size; i++ {
		var _key11 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key11 = v
		}
		var _val12 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val12 = v
		}
		p.Progress[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *DuplicationEntry) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := DuplicationFailMode(v)
		p.FailMode = &temp
	}
	return nil
}

func (p *DuplicationEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_entry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dupid", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dupid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Dupid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dupid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dupid: ", p), err)
	}
	return err
}

func (p *DuplicationEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *DuplicationEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remote", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remote: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remote)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remote (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remote: ", p), err)
	}
	return err
}

func (p *DuplicationEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_ts", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:create_ts: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_ts (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:create_ts: ", p), err)
	}
	return err
}

func (p *DuplicationEntry) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProgress() {
		if err := oprot.WriteFieldBegin("progress", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:progress: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.Progress)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Progress {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:progress: ", p), err)
		}
	}
	return err
}

func (p *DuplicationEntry) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailMode() {
		if err := oprot.WriteFieldBegin("fail_mode", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fail_mode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FailMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fail_mode (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fail_mode: ", p), err)
		}
	}
	return err
}

func (p *DuplicationEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationEntry(%+v)", *p)
}

// Attributes:
//  - AppName
type DuplicationQueryRequest struct {
	AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewDuplicationQueryRequest() *DuplicationQueryRequest {
	return &DuplicationQueryRequest{}
}

func (p *DuplicationQueryRequest) GetAppName() string {
	return p.AppName
}
func (p *DuplicationQueryRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationQueryRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *DuplicationQueryRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_query_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationQueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err)
	}
	return err
}

func (p *DuplicationQueryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationQueryRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Appid
//  - EntryList
type DuplicationQueryResponse struct {
	Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
	// unused field # 2
	Appid     int32               `thrift:"appid,3" db:"appid" json:"appid"`
	EntryList []*DuplicationEntry `thrift:"entry_list,4" db:"entry_list" json:"entry_list"`
}

func NewDuplicationQueryResponse() *DuplicationQueryResponse {
	return &DuplicationQueryResponse{}
}

var DuplicationQueryResponse_Err_DEFAULT *base.ErrorCode

func (p *DuplicationQueryResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return DuplicationQueryResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *DuplicationQueryResponse) GetAppid() int32 {
	return p.Appid
}

func (p *DuplicationQueryResponse) GetEntryList() []*DuplicationEntry {
	return p.EntryList
}
func (p *DuplicationQueryResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *DuplicationQueryResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DuplicationQueryResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *DuplicationQueryResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *DuplicationQueryResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DuplicationEntry, 0, size)
	p.EntryList = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &DuplicationEntry{}
		if err := _elem13.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
		}
		p.EntryList = append(p.EntryList, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DuplicationQueryResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("duplication_query_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DuplicationQueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *DuplicationQueryResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Appid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err)
	}
	return err
}

func (p *DuplicationQueryResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entry_list", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entry_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntryList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EntryList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entry_list: ", p), err)
	}
	return err
}

func (p *DuplicationQueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DuplicationQueryResponse(%+v)", *p)
}

// Attributes:
//  - PolicyName
//  - BackupProviderType
//  - BackupIntervalSeconds
//  - AppIds
//  - BackupHistoryCountToKeep
//  - StartTime
//  - IsDisable
type PolicyEntry struct {
	PolicyName               string  `thrift:"policy_name,1" db:"policy_name" json:"policy_name"`
	BackupProviderType       string  `thrift:"backup_provider_type,2" db:"backup_provider_type" json:"backup_provider_type"`
	BackupIntervalSeconds    string  `thrift:"backup_interval_seconds,3" db:"backup_interval_seconds" json:"backup_interval_seconds"`
	AppIds                   []int32 `thrift:"app_ids,4" db:"app_ids" json:"app_ids"`
	BackupHistoryCountToKeep int32   `thrift:"backup_history_count_to_keep,5" db:"backup_history_count_to_keep" json:"backup_history_count_to_keep"`
	StartTime                string  `thrift:"start_time,6" db:"start_time" json:"start_time"`
	IsDisable                bool    `thrift:"is_disable,7" db:"is_disable" json:"is_disable"`
}

func NewPolicyEntry() *PolicyEntry {
	return &PolicyEntry{}
}

func (p *PolicyEntry) GetPolicyName() string {
	return p.PolicyName
}

func (p *PolicyEntry) GetBackupProviderType() string {
	return p.BackupProviderType
}

func (p *PolicyEntry) GetBackupIntervalSeconds() string {
	return p.BackupIntervalSeconds
}

func (p *PolicyEntry) GetAppIds() []int32 {
	return p.AppIds
}

func (p *PolicyEntry) GetBackupHistoryCountToKeep() int32 {
	return p.BackupHistoryCountToKeep
}

func (p *PolicyEntry) GetStartTime() string {
	return p.StartTime
}

func (p *PolicyEntry) GetIsDisable() bool {
	return p.IsDisable
}
func (p *PolicyEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PolicyEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PolicyName = v
	}
	return nil
}

func (p *PolicyEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BackupProviderType = v
	}
	return nil
}

func (p *PolicyEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BackupIntervalSeconds = v
	}
	return nil
}

func (p *PolicyEntry) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int32, 0, size)
	p.AppIds = tSet
	for i := 0; i < size; i++ {
		var _elem14 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.AppIds = append(p.AppIds, _elem14)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *PolicyEntry) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BackupHistoryCountToKeep = v
	}
	return nil
}

func (p *PolicyEntry) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *PolicyEntry) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsDisable = v
	}
	return nil
}

func (p *PolicyEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("policy_entry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PolicyEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:policy_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PolicyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policy_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:policy_name: ", p), err)
	}
	return err
}

func (p *PolicyEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backup_provider_type", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:backup_provider_type: ", p), err)
	}
	if err := oprot.WriteString(string(p.BackupProviderType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.backup_provider_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:backup_provider_type: ", p), err)
	}
	return err
}

func (p *PolicyEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backup_interval_seconds", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:backup_interval_seconds: ", p), err)
	}
	if err := oprot.WriteString(string(p.BackupIntervalSeconds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.backup_interval_seconds (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:backup_interval_seconds: ", p), err)
	}
	return err
}

func (p *PolicyEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_ids", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_ids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.AppIds)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.AppIds); i++ {
		for j := i + 1; j < len(p.AppIds); j++ {
			if reflect.DeepEqual(p.AppIds[i], p.AppIds[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AppIds[i]))
			}
		}
	}
	for _, v := range p.AppIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_ids: ", p), err)
	}
	return err
}

func (p *PolicyEntry) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backup_history_count_to_keep", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:backup_history_count_to_keep: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BackupHistoryCountToKeep)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.backup_history_count_to_keep (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:backup_history_count_to_keep: ", p), err)
	}
	return err
}

func (p *PolicyEntry) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:start_time: ", p), err)
	}
	if err := oprot.WriteString(string(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:start_time: ", p), err)
	}
	return err
}

func (p *PolicyEntry) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_disable", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_disable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsDisable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_disable (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_disable: ", p), err)
	}
	return err
}

func (p *PolicyEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PolicyEntry(%+v)", *p)
}

// Attributes:
//  - BackupID
//  - StartTimeMs
//  - EndTimeMs
//  - AppIds
type BackupEntry struct {
	BackupID    int64   `thrift:"backup_id,1" db:"backup_id" json:"backup_id"`
	StartTimeMs int64   `thrift:"start_time_ms,2" db:"start_time_ms" json:"start_time_ms"`
	EndTimeMs   int64   `thrift:"end_time_ms,3" db:"end_time_ms" json:"end_time_ms"`
	AppIds      []int32 `thrift:"app_ids,4" db:"app_ids" json:"app_ids"`
}

func NewBackupEntry() *BackupEntry {
	return &BackupEntry{}
}

func (p *BackupEntry) GetBackupID() int64 {
	return p.BackupID
}

func (p *BackupEntry) GetStartTimeMs() int64 {
	return p.StartTimeMs
}

func (p *BackupEntry) GetEndTimeMs() int64 {
	return p.EndTimeMs
}

func (p *BackupEntry) GetAppIds() []int32 {
	return p.AppIds
}
func (p *BackupEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BackupEntry) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BackupID = v
	}
	return nil
}

func (p *BackupEntry) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartTimeMs = v
	}
	return nil
}

func (p *BackupEntry) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EndTimeMs = v
	}
	return nil
}

func (p *BackupEntry) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int32, 0, size)
	p.AppIds = tSet
	for i := 0; i < size; i++ {
		var _elem15 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.AppIds = append(p.AppIds, _elem15)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *BackupEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("backup_entry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BackupEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backup_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:backup_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BackupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.backup_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:backup_id: ", p), err)
	}
	return err
}

func (p *BackupEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time_ms", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time_ms (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_time_ms: ", p), err)
	}
	return err
}

func (p *BackupEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time_ms", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end_time_ms: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time_ms (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end_time_ms: ", p), err)
	}
	return err
}

func (p *BackupEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_ids", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_ids: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.AppIds)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.AppIds); i++ {
		for j := i + 1; j < len(p.AppIds); j++ {
			if reflect.DeepEqual(p.AppIds[i], p.AppIds[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AppIds[i]))
			}
		}
	}
	for _, v := range p.AppIds {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_ids: ", p), err)
	}
	return err
}

func (p *BackupEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackupEntry(%+v)", *p)
}

// Attributes:
//  - PolicyNames
//  - BackupInfoCount
type QueryBackupPolicyRequest struct {
	PolicyNames     []string `thrift:"policy_names,1" db:"policy_names" json:"policy_names"`
	BackupInfoCount int32    `thrift:"backup_info_count,2" db:"backup_info_count" json:"backup_info_count"`
}

func NewQueryBackupPolicyRequest() *QueryBackupPolicyRequest {
	return &QueryBackupPolicyRequest{}
}

func (p *QueryBackupPolicyRequest) GetPolicyNames() []string {
	return p.PolicyNames
}

func (p *QueryBackupPolicyRequest) GetBackupInfoCount() int32 {
	return p.BackupInfoCount
}
func (p *QueryBackupPolicyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryBackupPolicyRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PolicyNames = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.PolicyNames = append(p.PolicyNames, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryBackupPolicyRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BackupInfoCount = v
	}
	return nil
}

func (p *QueryBackupPolicyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_backup_policy_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryBackupPolicyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy_names", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:policy_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PolicyNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PolicyNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:policy_names: ", p), err)
	}
	return err
}

func (p *QueryBackupPolicyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backup_info_count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:backup_info_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BackupInfoCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.backup_info_count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:backup_info_count: ", p), err)
	}
	return err
}

func (p *QueryBackupPolicyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBackupPolicyRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Policys
//  - BackupInfos
//  - HintMsg
type QueryBackupPolicyResponse struct {
	Err         *base.ErrorCode  `thrift:"err,1" db:"err" json:"err"`
	Policys     []*PolicyEntry   `thrift:"policys,2" db:"policys" json:"policys"`
	BackupInfos [][]*BackupEntry `thrift:"backup_infos,3" db:"backup_infos" json:"backup_infos"`
	HintMsg     *string          `thrift:"hint_msg,4" db:"hint_msg" json:"hint_msg,omitempty"`
}

func NewQueryBackupPolicyResponse() *QueryBackupPolicyResponse {
	return &QueryBackupPolicyResponse{}
}

var QueryBackupPolicyResponse_Err_DEFAULT *base.ErrorCode

func (p *QueryBackupPolicyResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return QueryBackupPolicyResponse_Err_DEFAULT
	}
	return p.Err
}

func (p *QueryBackupPolicyResponse) GetPolicys() []*PolicyEntry {
	return p.Policys
}

func (p *QueryBackupPolicyResponse) GetBackupInfos() [][]*BackupEntry {
	return p.BackupInfos
}

var QueryBackupPolicyResponse_HintMsg_DEFAULT string

func (p *QueryBackupPolicyResponse) GetHintMsg() string {
	if !p.IsSetHintMsg() {
		return QueryBackupPolicyResponse_HintMsg_DEFAULT
	}
	return *p.HintMsg
}
func (p *QueryBackupPolicyResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *QueryBackupPolicyResponse) IsSetHintMsg() bool {
	return p.HintMsg != nil
}

func (p *QueryBackupPolicyResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryBackupPolicyResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *QueryBackupPolicyResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PolicyEntry, 0, size)
	p.Policys = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &PolicyEntry{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Policys = append(p.Policys, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryBackupPolicyResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]*BackupEntry, 0, size)
	p.BackupInfos = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*BackupEntry, 0, size)
		_elem18 := tSlice
		for i := 0; i < size; i++ {
			_elem19 := &BackupEntry{}
			if err := _elem19.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
			}
			_elem18 = append(_elem18, _elem19)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.BackupInfos = append(p.BackupInfos, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryBackupPolicyResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HintMsg = &v
	}
	return nil
}

func (p *QueryBackupPolicyResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_backup_policy_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryBackupPolicyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *QueryBackupPolicyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:policys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Policys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Policys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:policys: ", p), err)
	}
	return err
}

func (p *QueryBackupPolicyResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("backup_infos", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:backup_infos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.BackupInfos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BackupInfos {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:backup_infos: ", p), err)
	}
	return err
}

func (p *QueryBackupPolicyResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHintMsg() {
		if err := oprot.WriteFieldBegin("hint_msg", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hint_msg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HintMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hint_msg (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hint_msg: ", p), err)
		}
	}
	return err
}

func (p *QueryBackupPolicyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBackupPolicyResponse(%+v)", *p)
}

// Attributes:
//  - Target
//  - Node
//  - Type
type ConfigurationProposalAction struct {
	Target *base.RPCAddress `thrift:"target,1" db:"target" json:"target"`
	Node   *base.RPCAddress `thrift:"node,2" db:"node" json:"node"`
	Type   ConfigType       `thrift:"type,3" db:"type" json:"type"`
}

func NewConfigurationProposalAction() *ConfigurationProposalAction {
	return &ConfigurationProposalAction{}
}

var ConfigurationProposalAction_Target_DEFAULT *base.RPCAddress

func (p *ConfigurationProposalAction) GetTarget() *base.RPCAddress {
	if !p.IsSetTarget() {
		return ConfigurationProposalAction_Target_DEFAULT
	}
	return p.Target
}

var ConfigurationProposalAction_Node_DEFAULT *base.RPCAddress

func (p *ConfigurationProposalAction) GetNode() *base.RPCAddress {
	if !p.IsSetNode() {
		return ConfigurationProposalAction_Node_DEFAULT
	}
	return p.Node
}

func (p *ConfigurationProposalAction) GetType() ConfigType {
	return p.Type
}
func (p *ConfigurationProposalAction) IsSetTarget() bool {
	return p.Target != nil
}

func (p *ConfigurationProposalAction) IsSetNode() bool {
	return p.Node != nil
}

func (p *ConfigurationProposalAction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigurationProposalAction) ReadField1(iprot thrift.TProtocol) error {
	p.Target = &base.RPCAddress{}
	if err := p.Target.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
	}
	return nil
}

func (p *ConfigurationProposalAction) ReadField2(iprot thrift.TProtocol) error {
	p.Node = &base.RPCAddress{}
	if err := p.Node.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
	}
	return nil
}

func (p *ConfigurationProposalAction) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ConfigType(v)
		p.Type = temp
	}
	return nil
}

func (p *ConfigurationProposalAction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("configuration_proposal_action"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigurationProposalAction) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:target: ", p), err)
	}
	if err := p.Target.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:target: ", p), err)
	}
	return err
}

func (p *ConfigurationProposalAction) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("node", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node: ", p), err)
	}
	if err := p.Node.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node: ", p), err)
	}
	return err
}

func (p *ConfigurationProposalAction) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *ConfigurationProposalAction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigurationProposalAction(%+v)", *p)
}

// Attributes:
//  - Gpid
//  - ActionList
//  - Force
//  - BalanceType
type BalanceRequest struct {
	Gpid        *base.Gpid                     `thrift:"gpid,1" db:"gpid" json:"gpid"`
	ActionList  []*ConfigurationProposalAction `thrift:"action_list,2" db:"action_list" json:"action_list"`
	Force       bool                           `thrift:"force,3" db:"force" json:"force"`
	BalanceType *BalancerRequestType           `thrift:"balance_type,4" db:"balance_type" json:"balance_type,omitempty"`
}

func NewBalanceRequest() *BalanceRequest {
	return &BalanceRequest{}
}

var BalanceRequest_Gpid_DEFAULT *base.Gpid

func (p *BalanceRequest) GetGpid() *base.Gpid {
	if !p.IsSetGpid() {
		return BalanceRequest_Gpid_DEFAULT
	}
	return p.Gpid
}

func (p *BalanceRequest) GetActionList() []*ConfigurationProposalAction {
	return p.ActionList
}

var BalanceRequest_Force_DEFAULT bool = false

func (p *BalanceRequest) GetForce() bool {
	return p.Force
}

var BalanceRequest_BalanceType_DEFAULT BalancerRequestType

func (p *BalanceRequest) GetBalanceType() BalancerRequestType {
	if !p.IsSetBalanceType() {
		return BalanceRequest_BalanceType_DEFAULT
	}
	return *p.BalanceType
}
func (p *BalanceRequest) IsSetGpid() bool {
	return p.Gpid != nil
}

func (p *BalanceRequest) IsSetForce() bool {
	return p.Force != BalanceRequest_Force_DEFAULT
}

func (p *BalanceRequest) IsSetBalanceType() bool {
	return p.BalanceType != nil
}

func (p *BalanceRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BalanceRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Gpid = &base.Gpid{}
	if err := p.Gpid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gpid), err)
	}
	return nil
}

func (p *BalanceRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConfigurationProposalAction, 0, size)
	p.ActionList = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &ConfigurationProposalAction{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.ActionList = append(p.ActionList, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BalanceRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Force = v
	}
	return nil
}

func (p *BalanceRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := BalancerRequestType(v)
		p.BalanceType = &temp
	}
	return nil
}

func (p *BalanceRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("balance_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BalanceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gpid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gpid: ", p), err)
	}
	if err := p.Gpid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gpid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gpid: ", p), err)
	}
	return err
}

func (p *BalanceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("action_list", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action_list: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ActionList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ActionList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action_list: ", p), err)
	}
	return err
}

func (p *BalanceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetForce() {
		if err := oprot.WriteFieldBegin("force", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:force: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.Force)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.force (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:force: ", p), err)
		}
	}
	return err
}

func (p *BalanceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBalanceType() {
		if err := oprot.WriteFieldBegin("balance_type", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:balance_type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BalanceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.balance_type (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:balance_type: ", p), err)
		}
	}
	return err
}

func (p *BalanceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BalanceRequest(%+v)", *p)
}

// Attributes:
//  - Err
type BalanceResponse struct {
	Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewBalanceResponse() *BalanceResponse {
	return &BalanceResponse{}
}

var BalanceResponse_Err_DEFAULT *base.ErrorCode

func (p *BalanceResponse) GetErr() *base.ErrorCode {
	if !p.IsSetErr() {
		return BalanceResponse_Err_DEFAULT
	}
	return p.Err
}
func (p *BalanceResponse) IsSetErr() bool {
	return p.Err != nil
}

func (p *BalanceResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BalanceResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &base.ErrorCode{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *BalanceResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("balance_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BalanceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
	}
	if err := p.Err.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
	}
	return err
}

func (p *BalanceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BalanceResponse(%+v)", *p)
}

type AdminClient interface {
	// Parameters:
	//  - Req
	CreateApp(ctx context.Context, req *CreateAppRequest) (r *CreateAppResponse, err error)
	// Parameters:
	//  - Req
	DropApp(ctx context.Context, req *DropAppRequest) (r *DropAppResponse, err error)
	// Parameters:
	//  - Req
	RecallApp(ctx context.Context, req *RecallAppRequest) (r *RecallAppResponse, err error)
	// Parameters:
	//  - Req
	ListApps(ctx context.Context, req *ListAppsRequest) (r *ListAppsResponse, err error)
	// Parameters:
	//  - Req
	AddDuplication(ctx context.Context, req *DuplicationAddRequest) (r *DuplicationAddResponse, err error)
	// Parameters:
	//  - Req
	QueryDuplication(ctx context.Context, req *DuplicationQueryRequest) (r *DuplicationQueryResponse, err error)
	// Parameters:
	//  - Req
	ModifyDuplication(ctx context.Context, req *DuplicationModifyRequest) (r *DuplicationModifyResponse, err error)
	// Parameters:
	//  - Req
	QueryAppInfo(ctx context.Context, req *QueryAppInfoRequest) (r *QueryAppInfoResponse, err error)
	// Parameters:
	//  - Req
	UpdateAppEnv(ctx context.Context, req *UpdateAppEnvRequest) (r *UpdateAppEnvResponse, err error)
	// Parameters:
	//  - Req
	ListNodes(ctx context.Context, req *ListNodesRequest) (r *ListNodesResponse, err error)
	// Parameters:
	//  - Req
	QueryClusterInfo(ctx context.Context, req *ClusterInfoRequest) (r *ClusterInfoResponse, err error)
	// Parameters:
	//  - Req
	MetaControl(ctx context.Context, req *MetaControlRequest) (r *MetaControlResponse, err error)
	// Parameters:
	//  - Req
	QueryBackupPolicy(ctx context.Context, req *QueryBackupPolicyRequest) (r *QueryBackupPolicyResponse, err error)
	// Parameters:
	//  - Req
	Balance(ctx context.Context, req *BalanceRequest) (r *BalanceResponse, err error)
}

type AdminClientClient struct {
	c thrift.TClient
}

func NewAdminClientClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdminClientClient {
	return &AdminClientClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAdminClientClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdminClientClient {
	return &AdminClientClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAdminClientClient(c thrift.TClient) *AdminClientClient {
	return &AdminClientClient{
		c: c,
	}
}

func (p *AdminClientClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Req
func (p *AdminClientClient) CreateApp(ctx context.Context, req *CreateAppRequest) (r *CreateAppResponse, err error) {
	var _args21 AdminClientCreateAppArgs
	_args21.Req = req
	var _result22 AdminClientCreateAppResult
	if err = p.Client_().Call(ctx, "create_app", &_args21, &_result22); err != nil {
		return
	}
	return _result22.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) DropApp(ctx context.Context, req *DropAppRequest) (r *DropAppResponse, err error) {
	var _args23 AdminClientDropAppArgs
	_args23.Req = req
	var _result24 AdminClientDropAppResult
	if err = p.Client_().Call(ctx, "drop_app", &_args23, &_result24); err != nil {
		return
	}
	return _result24.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) RecallApp(ctx context.Context, req *RecallAppRequest) (r *RecallAppResponse, err error) {
	var _args25 AdminClientRecallAppArgs
	_args25.Req = req
	var _result26 AdminClientRecallAppResult
	if err = p.Client_().Call(ctx, "recall_app", &_args25, &_result26); err != nil {
		return
	}
	return _result26.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) ListApps(ctx context.Context, req *ListAppsRequest) (r *ListAppsResponse, err error) {
	var _args27 AdminClientListAppsArgs
	_args27.Req = req
	var _result28 AdminClientListAppsResult
	if err = p.Client_().Call(ctx, "list_apps", &_args27, &_result28); err != nil {
		return
	}
	return _result28.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) AddDuplication(ctx context.Context, req *DuplicationAddRequest) (r *DuplicationAddResponse, err error) {
	var _args29 AdminClientAddDuplicationArgs
	_args29.Req = req
	var _result30 AdminClientAddDuplicationResult
	if err = p.Client_().Call(ctx, "add_duplication", &_args29, &_result30); err != nil {
		return
	}
	return _result30.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryDuplication(ctx context.Context, req *DuplicationQueryRequest) (r *DuplicationQueryResponse, err error) {
	var _args31 AdminClientQueryDuplicationArgs
	_args31.Req = req
	var _result32 AdminClientQueryDuplicationResult
	if err = p.Client_().Call(ctx, "query_duplication", &_args31, &_result32); err != nil {
		return
	}
	return _result32.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) ModifyDuplication(ctx context.Context, req *DuplicationModifyRequest) (r *DuplicationModifyResponse, err error) {
	var _args33 AdminClientModifyDuplicationArgs
	_args33.Req = req
	var _result34 AdminClientModifyDuplicationResult
	if err = p.Client_().Call(ctx, "modify_duplication", &_args33, &_result34); err != nil {
		return
	}
	return _result34.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryAppInfo(ctx context.Context, req *QueryAppInfoRequest) (r *QueryAppInfoResponse, err error) {
	var _args35 AdminClientQueryAppInfoArgs
	_args35.Req = req
	var _result36 AdminClientQueryAppInfoResult
	if err = p.Client_().Call(ctx, "query_app_info", &_args35, &_result36); err != nil {
		return
	}
	return _result36.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) UpdateAppEnv(ctx context.Context, req *UpdateAppEnvRequest) (r *UpdateAppEnvResponse, err error) {
	var _args37 AdminClientUpdateAppEnvArgs
	_args37.Req = req
	var _result38 AdminClientUpdateAppEnvResult
	if err = p.Client_().Call(ctx, "update_app_env", &_args37, &_result38); err != nil {
		return
	}
	return _result38.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) ListNodes(ctx context.Context, req *ListNodesRequest) (r *ListNodesResponse, err error) {
	var _args39 AdminClientListNodesArgs
	_args39.Req = req
	var _result40 AdminClientListNodesResult
	if err = p.Client_().Call(ctx, "list_nodes", &_args39, &_result40); err != nil {
		return
	}
	return _result40.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryClusterInfo(ctx context.Context, req *ClusterInfoRequest) (r *ClusterInfoResponse, err error) {
	var _args41 AdminClientQueryClusterInfoArgs
	_args41.Req = req
	var _result42 AdminClientQueryClusterInfoResult
	if err = p.Client_().Call(ctx, "query_cluster_info", &_args41, &_result42); err != nil {
		return
	}
	return _result42.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) MetaControl(ctx context.Context, req *MetaControlRequest) (r *MetaControlResponse, err error) {
	var _args43 AdminClientMetaControlArgs
	_args43.Req = req
	var _result44 AdminClientMetaControlResult
	if err = p.Client_().Call(ctx, "meta_control", &_args43, &_result44); err != nil {
		return
	}
	return _result44.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) QueryBackupPolicy(ctx context.Context, req *QueryBackupPolicyRequest) (r *QueryBackupPolicyResponse, err error) {
	var _args45 AdminClientQueryBackupPolicyArgs
	_args45.Req = req
	var _result46 AdminClientQueryBackupPolicyResult
	if err = p.Client_().Call(ctx, "query_backup_policy", &_args45, &_result46); err != nil {
		return
	}
	return _result46.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *AdminClientClient) Balance(ctx context.Context, req *BalanceRequest) (r *BalanceResponse, err error) {
	var _args47 AdminClientBalanceArgs
	_args47.Req = req
	var _result48 AdminClientBalanceResult
	if err = p.Client_().Call(ctx, "balance", &_args47, &_result48); err != nil {
		return
	}
	return _result48.GetSuccess(), nil
}

type AdminClientProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AdminClient
}

func (p *AdminClientProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AdminClientProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AdminClientProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAdminClientProcessor(handler AdminClient) *AdminClientProcessor {

	self49 := &AdminClientProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self49.processorMap["create_app"] = &adminClientProcessorCreateApp{handler: handler}
	self49.processorMap["drop_app"] = &adminClientProcessorDropApp{handler: handler}
	self49.processorMap["recall_app"] = &adminClientProcessorRecallApp{handler: handler}
	self49.processorMap["list_apps"] = &adminClientProcessorListApps{handler: handler}
	self49.processorMap["add_duplication"] = &adminClientProcessorAddDuplication{handler: handler}
	self49.processorMap["query_duplication"] = &adminClientProcessorQueryDuplication{handler: handler}
	self49.processorMap["modify_duplication"] = &adminClientProcessorModifyDuplication{handler: handler}
	self49.processorMap["query_app_info"] = &adminClientProcessorQueryAppInfo{handler: handler}
	self49.processorMap["update_app_env"] = &adminClientProcessorUpdateAppEnv{handler: handler}
	self49.processorMap["list_nodes"] = &adminClientProcessorListNodes{handler: handler}
	self49.processorMap["query_cluster_info"] = &adminClientProcessorQueryClusterInfo{handler: handler}
	self49.processorMap["meta_control"] = &adminClientProcessorMetaControl{handler: handler}
	self49.processorMap["query_backup_policy"] = &adminClientProcessorQueryBackupPolicy{handler: handler}
	self49.processorMap["balance"] = &adminClientProcessorBalance{handler: handler}
	return self49
}

func (p *AdminClientProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x50 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x50.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x50

}

type adminClientProcessorCreateApp struct {
	handler AdminClient
}

func (p *adminClientProcessorCreateApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientCreateAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_app", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientCreateAppResult{}
	var retval *CreateAppResponse
	var err2 error
	if retval, err2 = p.handler.CreateApp(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_app: "+err2.Error())
		oprot.WriteMessageBegin("create_app", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("create_app", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorDropApp struct {
	handler AdminClient
}

func (p *adminClientProcessorDropApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientDropAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_app", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientDropAppResult{}
	var retval *DropAppResponse
	var err2 error
	if retval, err2 = p.handler.DropApp(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_app: "+err2.Error())
		oprot.WriteMessageBegin("drop_app", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("drop_app", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorRecallApp struct {
	handler AdminClient
}

func (p *adminClientProcessorRecallApp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientRecallAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("recall_app", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientRecallAppResult{}
	var retval *RecallAppResponse
	var err2 error
	if retval, err2 = p.handler.RecallApp(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing recall_app: "+err2.Error())
		oprot.WriteMessageBegin("recall_app", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("recall_app", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorListApps struct {
	handler AdminClient
}

func (p *adminClientProcessorListApps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientListAppsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_apps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientListAppsResult{}
	var retval *ListAppsResponse
	var err2 error
	if retval, err2 = p.handler.ListApps(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_apps: "+err2.Error())
		oprot.WriteMessageBegin("list_apps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_apps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorAddDuplication struct {
	handler AdminClient
}

func (p *adminClientProcessorAddDuplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientAddDuplicationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_duplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientAddDuplicationResult{}
	var retval *DuplicationAddResponse
	var err2 error
	if retval, err2 = p.handler.AddDuplication(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_duplication: "+err2.Error())
		oprot.WriteMessageBegin("add_duplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("add_duplication", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorQueryDuplication struct {
	handler AdminClient
}

func (p *adminClientProcessorQueryDuplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientQueryDuplicationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_duplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientQueryDuplicationResult{}
	var retval *DuplicationQueryResponse
	var err2 error
	if retval, err2 = p.handler.QueryDuplication(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_duplication: "+err2.Error())
		oprot.WriteMessageBegin("query_duplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_duplication", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorModifyDuplication struct {
	handler AdminClient
}

func (p *adminClientProcessorModifyDuplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientModifyDuplicationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("modify_duplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientModifyDuplicationResult{}
	var retval *DuplicationModifyResponse
	var err2 error
	if retval, err2 = p.handler.ModifyDuplication(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modify_duplication: "+err2.Error())
		oprot.WriteMessageBegin("modify_duplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("modify_duplication", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorQueryAppInfo struct {
	handler AdminClient
}

func (p *adminClientProcessorQueryAppInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientQueryAppInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_app_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientQueryAppInfoResult{}
	var retval *QueryAppInfoResponse
	var err2 error
	if retval, err2 = p.handler.QueryAppInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_app_info: "+err2.Error())
		oprot.WriteMessageBegin("query_app_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_app_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorUpdateAppEnv struct {
	handler AdminClient
}

func (p *adminClientProcessorUpdateAppEnv) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientUpdateAppEnvArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("update_app_env", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientUpdateAppEnvResult{}
	var retval *UpdateAppEnvResponse
	var err2 error
	if retval, err2 = p.handler.UpdateAppEnv(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_app_env: "+err2.Error())
		oprot.WriteMessageBegin("update_app_env", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("update_app_env", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorListNodes struct {
	handler AdminClient
}

func (p *adminClientProcessorListNodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientListNodesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_nodes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientListNodesResult{}
	var retval *ListNodesResponse
	var err2 error
	if retval, err2 = p.handler.ListNodes(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_nodes: "+err2.Error())
		oprot.WriteMessageBegin("list_nodes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_nodes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorQueryClusterInfo struct {
	handler AdminClient
}

func (p *adminClientProcessorQueryClusterInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientQueryClusterInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_cluster_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientQueryClusterInfoResult{}
	var retval *ClusterInfoResponse
	var err2 error
	if retval, err2 = p.handler.QueryClusterInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_cluster_info: "+err2.Error())
		oprot.WriteMessageBegin("query_cluster_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_cluster_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorMetaControl struct {
	handler AdminClient
}

func (p *adminClientProcessorMetaControl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientMetaControlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("meta_control", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientMetaControlResult{}
	var retval *MetaControlResponse
	var err2 error
	if retval, err2 = p.handler.MetaControl(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing meta_control: "+err2.Error())
		oprot.WriteMessageBegin("meta_control", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("meta_control", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorQueryBackupPolicy struct {
	handler AdminClient
}

func (p *adminClientProcessorQueryBackupPolicy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientQueryBackupPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_backup_policy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientQueryBackupPolicyResult{}
	var retval *QueryBackupPolicyResponse
	var err2 error
	if retval, err2 = p.handler.QueryBackupPolicy(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_backup_policy: "+err2.Error())
		oprot.WriteMessageBegin("query_backup_policy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_backup_policy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type adminClientProcessorBalance struct {
	handler AdminClient
}

func (p *adminClientProcessorBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AdminClientBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("balance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AdminClientBalanceResult{}
	var retval *BalanceResponse
	var err2 error
	if retval, err2 = p.handler.Balance(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing balance: "+err2.Error())
		oprot.WriteMessageBegin("balance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("balance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type AdminClientCreateAppArgs struct {
	Req *CreateAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientCreateAppArgs() *AdminClientCreateAppArgs {
	return &AdminClientCreateAppArgs{}
}

var AdminClientCreateAppArgs_Req_DEFAULT *CreateAppRequest

func (p *AdminClientCreateAppArgs) GetReq() *CreateAppRequest {
	if !p.IsSetReq() {
		return AdminClientCreateAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientCreateAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientCreateAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientCreateAppArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CreateAppRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientCreateAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_app_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientCreateAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientCreateAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientCreateAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientCreateAppResult struct {
	Success *CreateAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientCreateAppResult() *AdminClientCreateAppResult {
	return &AdminClientCreateAppResult{}
}

var AdminClientCreateAppResult_Success_DEFAULT *CreateAppResponse

func (p *AdminClientCreateAppResult) GetSuccess() *CreateAppResponse {
	if !p.IsSetSuccess() {
		return AdminClientCreateAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientCreateAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientCreateAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientCreateAppResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateAppResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientCreateAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_app_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientCreateAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientCreateAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientCreateAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientDropAppArgs struct {
	Req *DropAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientDropAppArgs() *AdminClientDropAppArgs {
	return &AdminClientDropAppArgs{}
}

var AdminClientDropAppArgs_Req_DEFAULT *DropAppRequest

func (p *AdminClientDropAppArgs) GetReq() *DropAppRequest {
	if !p.IsSetReq() {
		return AdminClientDropAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientDropAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientDropAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientDropAppArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DropAppRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientDropAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_app_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientDropAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientDropAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientDropAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientDropAppResult struct {
	Success *DropAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientDropAppResult() *AdminClientDropAppResult {
	return &AdminClientDropAppResult{}
}

var AdminClientDropAppResult_Success_DEFAULT *DropAppResponse

func (p *AdminClientDropAppResult) GetSuccess() *DropAppResponse {
	if !p.IsSetSuccess() {
		return AdminClientDropAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientDropAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientDropAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientDropAppResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DropAppResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientDropAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_app_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientDropAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientDropAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientDropAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientRecallAppArgs struct {
	Req *RecallAppRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientRecallAppArgs() *AdminClientRecallAppArgs {
	return &AdminClientRecallAppArgs{}
}

var AdminClientRecallAppArgs_Req_DEFAULT *RecallAppRequest

func (p *AdminClientRecallAppArgs) GetReq() *RecallAppRequest {
	if !p.IsSetReq() {
		return AdminClientRecallAppArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientRecallAppArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientRecallAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientRecallAppArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RecallAppRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientRecallAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("recall_app_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientRecallAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientRecallAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientRecallAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientRecallAppResult struct {
	Success *RecallAppResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientRecallAppResult() *AdminClientRecallAppResult {
	return &AdminClientRecallAppResult{}
}

var AdminClientRecallAppResult_Success_DEFAULT *RecallAppResponse

func (p *AdminClientRecallAppResult) GetSuccess() *RecallAppResponse {
	if !p.IsSetSuccess() {
		return AdminClientRecallAppResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientRecallAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientRecallAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientRecallAppResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RecallAppResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientRecallAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("recall_app_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientRecallAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientRecallAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientRecallAppResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientListAppsArgs struct {
	Req *ListAppsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientListAppsArgs() *AdminClientListAppsArgs {
	return &AdminClientListAppsArgs{}
}

var AdminClientListAppsArgs_Req_DEFAULT *ListAppsRequest

func (p *AdminClientListAppsArgs) GetReq() *ListAppsRequest {
	if !p.IsSetReq() {
		return AdminClientListAppsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientListAppsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientListAppsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientListAppsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ListAppsRequest{
		Status: 0,
	}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientListAppsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_apps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientListAppsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientListAppsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientListAppsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientListAppsResult struct {
	Success *ListAppsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientListAppsResult() *AdminClientListAppsResult {
	return &AdminClientListAppsResult{}
}

var AdminClientListAppsResult_Success_DEFAULT *ListAppsResponse

func (p *AdminClientListAppsResult) GetSuccess() *ListAppsResponse {
	if !p.IsSetSuccess() {
		return AdminClientListAppsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientListAppsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientListAppsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientListAppsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListAppsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientListAppsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_apps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientListAppsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientListAppsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientListAppsResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientAddDuplicationArgs struct {
	Req *DuplicationAddRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientAddDuplicationArgs() *AdminClientAddDuplicationArgs {
	return &AdminClientAddDuplicationArgs{}
}

var AdminClientAddDuplicationArgs_Req_DEFAULT *DuplicationAddRequest

func (p *AdminClientAddDuplicationArgs) GetReq() *DuplicationAddRequest {
	if !p.IsSetReq() {
		return AdminClientAddDuplicationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientAddDuplicationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientAddDuplicationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientAddDuplicationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DuplicationAddRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientAddDuplicationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_duplication_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientAddDuplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientAddDuplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientAddDuplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientAddDuplicationResult struct {
	Success *DuplicationAddResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientAddDuplicationResult() *AdminClientAddDuplicationResult {
	return &AdminClientAddDuplicationResult{}
}

var AdminClientAddDuplicationResult_Success_DEFAULT *DuplicationAddResponse

func (p *AdminClientAddDuplicationResult) GetSuccess() *DuplicationAddResponse {
	if !p.IsSetSuccess() {
		return AdminClientAddDuplicationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientAddDuplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientAddDuplicationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientAddDuplicationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DuplicationAddResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientAddDuplicationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_duplication_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientAddDuplicationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientAddDuplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientAddDuplicationResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryDuplicationArgs struct {
	Req *DuplicationQueryRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryDuplicationArgs() *AdminClientQueryDuplicationArgs {
	return &AdminClientQueryDuplicationArgs{}
}

var AdminClientQueryDuplicationArgs_Req_DEFAULT *DuplicationQueryRequest

func (p *AdminClientQueryDuplicationArgs) GetReq() *DuplicationQueryRequest {
	if !p.IsSetReq() {
		return AdminClientQueryDuplicationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientQueryDuplicationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientQueryDuplicationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryDuplicationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DuplicationQueryRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientQueryDuplicationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_duplication_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryDuplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientQueryDuplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryDuplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryDuplicationResult struct {
	Success *DuplicationQueryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryDuplicationResult() *AdminClientQueryDuplicationResult {
	return &AdminClientQueryDuplicationResult{}
}

var AdminClientQueryDuplicationResult_Success_DEFAULT *DuplicationQueryResponse

func (p *AdminClientQueryDuplicationResult) GetSuccess() *DuplicationQueryResponse {
	if !p.IsSetSuccess() {
		return AdminClientQueryDuplicationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientQueryDuplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientQueryDuplicationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryDuplicationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DuplicationQueryResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientQueryDuplicationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_duplication_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryDuplicationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientQueryDuplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryDuplicationResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientModifyDuplicationArgs struct {
	Req *DuplicationModifyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientModifyDuplicationArgs() *AdminClientModifyDuplicationArgs {
	return &AdminClientModifyDuplicationArgs{}
}

var AdminClientModifyDuplicationArgs_Req_DEFAULT *DuplicationModifyRequest

func (p *AdminClientModifyDuplicationArgs) GetReq() *DuplicationModifyRequest {
	if !p.IsSetReq() {
		return AdminClientModifyDuplicationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientModifyDuplicationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientModifyDuplicationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientModifyDuplicationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DuplicationModifyRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientModifyDuplicationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("modify_duplication_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientModifyDuplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientModifyDuplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientModifyDuplicationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientModifyDuplicationResult struct {
	Success *DuplicationModifyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientModifyDuplicationResult() *AdminClientModifyDuplicationResult {
	return &AdminClientModifyDuplicationResult{}
}

var AdminClientModifyDuplicationResult_Success_DEFAULT *DuplicationModifyResponse

func (p *AdminClientModifyDuplicationResult) GetSuccess() *DuplicationModifyResponse {
	if !p.IsSetSuccess() {
		return AdminClientModifyDuplicationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientModifyDuplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientModifyDuplicationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientModifyDuplicationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DuplicationModifyResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientModifyDuplicationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("modify_duplication_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientModifyDuplicationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientModifyDuplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientModifyDuplicationResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryAppInfoArgs struct {
	Req *QueryAppInfoRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryAppInfoArgs() *AdminClientQueryAppInfoArgs {
	return &AdminClientQueryAppInfoArgs{}
}

var AdminClientQueryAppInfoArgs_Req_DEFAULT *QueryAppInfoRequest

func (p *AdminClientQueryAppInfoArgs) GetReq() *QueryAppInfoRequest {
	if !p.IsSetReq() {
		return AdminClientQueryAppInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientQueryAppInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientQueryAppInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryAppInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryAppInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientQueryAppInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_app_info_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryAppInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientQueryAppInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryAppInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryAppInfoResult struct {
	Success *QueryAppInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryAppInfoResult() *AdminClientQueryAppInfoResult {
	return &AdminClientQueryAppInfoResult{}
}

var AdminClientQueryAppInfoResult_Success_DEFAULT *QueryAppInfoResponse

func (p *AdminClientQueryAppInfoResult) GetSuccess() *QueryAppInfoResponse {
	if !p.IsSetSuccess() {
		return AdminClientQueryAppInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientQueryAppInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientQueryAppInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryAppInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryAppInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientQueryAppInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_app_info_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryAppInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientQueryAppInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryAppInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientUpdateAppEnvArgs struct {
	Req *UpdateAppEnvRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientUpdateAppEnvArgs() *AdminClientUpdateAppEnvArgs {
	return &AdminClientUpdateAppEnvArgs{}
}

var AdminClientUpdateAppEnvArgs_Req_DEFAULT *UpdateAppEnvRequest

func (p *AdminClientUpdateAppEnvArgs) GetReq() *UpdateAppEnvRequest {
	if !p.IsSetReq() {
		return AdminClientUpdateAppEnvArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientUpdateAppEnvArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientUpdateAppEnvArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientUpdateAppEnvArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateAppEnvRequest{
		Op: 0,
	}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientUpdateAppEnvArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_app_env_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientUpdateAppEnvArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientUpdateAppEnvArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientUpdateAppEnvArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientUpdateAppEnvResult struct {
	Success *UpdateAppEnvResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientUpdateAppEnvResult() *AdminClientUpdateAppEnvResult {
	return &AdminClientUpdateAppEnvResult{}
}

var AdminClientUpdateAppEnvResult_Success_DEFAULT *UpdateAppEnvResponse

func (p *AdminClientUpdateAppEnvResult) GetSuccess() *UpdateAppEnvResponse {
	if !p.IsSetSuccess() {
		return AdminClientUpdateAppEnvResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientUpdateAppEnvResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientUpdateAppEnvResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientUpdateAppEnvResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateAppEnvResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientUpdateAppEnvResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_app_env_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientUpdateAppEnvResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientUpdateAppEnvResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientUpdateAppEnvResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientListNodesArgs struct {
	Req *ListNodesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientListNodesArgs() *AdminClientListNodesArgs {
	return &AdminClientListNodesArgs{}
}

var AdminClientListNodesArgs_Req_DEFAULT *ListNodesRequest

func (p *AdminClientListNodesArgs) GetReq() *ListNodesRequest {
	if !p.IsSetReq() {
		return AdminClientListNodesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientListNodesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientListNodesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientListNodesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ListNodesRequest{
		Status: 0,
	}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientListNodesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_nodes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientListNodesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientListNodesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientListNodesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientListNodesResult struct {
	Success *ListNodesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientListNodesResult() *AdminClientListNodesResult {
	return &AdminClientListNodesResult{}
}

var AdminClientListNodesResult_Success_DEFAULT *ListNodesResponse

func (p *AdminClientListNodesResult) GetSuccess() *ListNodesResponse {
	if !p.IsSetSuccess() {
		return AdminClientListNodesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientListNodesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientListNodesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientListNodesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListNodesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientListNodesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_nodes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientListNodesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientListNodesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientListNodesResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryClusterInfoArgs struct {
	Req *ClusterInfoRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryClusterInfoArgs() *AdminClientQueryClusterInfoArgs {
	return &AdminClientQueryClusterInfoArgs{}
}

var AdminClientQueryClusterInfoArgs_Req_DEFAULT *ClusterInfoRequest

func (p *AdminClientQueryClusterInfoArgs) GetReq() *ClusterInfoRequest {
	if !p.IsSetReq() {
		return AdminClientQueryClusterInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientQueryClusterInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientQueryClusterInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryClusterInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ClusterInfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientQueryClusterInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_cluster_info_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryClusterInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientQueryClusterInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryClusterInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryClusterInfoResult struct {
	Success *ClusterInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryClusterInfoResult() *AdminClientQueryClusterInfoResult {
	return &AdminClientQueryClusterInfoResult{}
}

var AdminClientQueryClusterInfoResult_Success_DEFAULT *ClusterInfoResponse

func (p *AdminClientQueryClusterInfoResult) GetSuccess() *ClusterInfoResponse {
	if !p.IsSetSuccess() {
		return AdminClientQueryClusterInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientQueryClusterInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientQueryClusterInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryClusterInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ClusterInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientQueryClusterInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_cluster_info_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryClusterInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientQueryClusterInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryClusterInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientMetaControlArgs struct {
	Req *MetaControlRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientMetaControlArgs() *AdminClientMetaControlArgs {
	return &AdminClientMetaControlArgs{}
}

var AdminClientMetaControlArgs_Req_DEFAULT *MetaControlRequest

func (p *AdminClientMetaControlArgs) GetReq() *MetaControlRequest {
	if !p.IsSetReq() {
		return AdminClientMetaControlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientMetaControlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientMetaControlArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientMetaControlArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MetaControlRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientMetaControlArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("meta_control_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientMetaControlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientMetaControlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientMetaControlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientMetaControlResult struct {
	Success *MetaControlResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientMetaControlResult() *AdminClientMetaControlResult {
	return &AdminClientMetaControlResult{}
}

var AdminClientMetaControlResult_Success_DEFAULT *MetaControlResponse

func (p *AdminClientMetaControlResult) GetSuccess() *MetaControlResponse {
	if !p.IsSetSuccess() {
		return AdminClientMetaControlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientMetaControlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientMetaControlResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientMetaControlResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MetaControlResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientMetaControlResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("meta_control_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientMetaControlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientMetaControlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientMetaControlResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientQueryBackupPolicyArgs struct {
	Req *QueryBackupPolicyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientQueryBackupPolicyArgs() *AdminClientQueryBackupPolicyArgs {
	return &AdminClientQueryBackupPolicyArgs{}
}

var AdminClientQueryBackupPolicyArgs_Req_DEFAULT *QueryBackupPolicyRequest

func (p *AdminClientQueryBackupPolicyArgs) GetReq() *QueryBackupPolicyRequest {
	if !p.IsSetReq() {
		return AdminClientQueryBackupPolicyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientQueryBackupPolicyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientQueryBackupPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryBackupPolicyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryBackupPolicyRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientQueryBackupPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_backup_policy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryBackupPolicyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientQueryBackupPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryBackupPolicyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientQueryBackupPolicyResult struct {
	Success *QueryBackupPolicyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientQueryBackupPolicyResult() *AdminClientQueryBackupPolicyResult {
	return &AdminClientQueryBackupPolicyResult{}
}

var AdminClientQueryBackupPolicyResult_Success_DEFAULT *QueryBackupPolicyResponse

func (p *AdminClientQueryBackupPolicyResult) GetSuccess() *QueryBackupPolicyResponse {
	if !p.IsSetSuccess() {
		return AdminClientQueryBackupPolicyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientQueryBackupPolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientQueryBackupPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientQueryBackupPolicyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryBackupPolicyResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientQueryBackupPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_backup_policy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientQueryBackupPolicyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientQueryBackupPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientQueryBackupPolicyResult(%+v)", *p)
}

// Attributes:
//  - Req
type AdminClientBalanceArgs struct {
	Req *BalanceRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewAdminClientBalanceArgs() *AdminClientBalanceArgs {
	return &AdminClientBalanceArgs{}
}

var AdminClientBalanceArgs_Req_DEFAULT *BalanceRequest

func (p *AdminClientBalanceArgs) GetReq() *BalanceRequest {
	if !p.IsSetReq() {
		return AdminClientBalanceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AdminClientBalanceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminClientBalanceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientBalanceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &BalanceRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *AdminClientBalanceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("balance_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientBalanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *AdminClientBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdminClientBalanceResult struct {
	Success *BalanceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdminClientBalanceResult() *AdminClientBalanceResult {
	return &AdminClientBalanceResult{}
}

var AdminClientBalanceResult_Success_DEFAULT *BalanceResponse

func (p *AdminClientBalanceResult) GetSuccess() *BalanceResponse {
	if !p.IsSetSuccess() {
		return AdminClientBalanceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AdminClientBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminClientBalanceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdminClientBalanceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BalanceResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdminClientBalanceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("balance_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdminClientBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdminClientBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdminClientBalanceResult(%+v)", *p)
}
